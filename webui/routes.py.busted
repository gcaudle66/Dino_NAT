import os
import secrets
from flask_login import current_user
from flask import render_template, url_for, request, redirect, flash
from webui import app, db, bcrypt
from webui.forms import RegistrationForm, LoginForm, UpdateAccountForm, ImportCSV
from webui.models import User, Post

from flask_login import login_user, current_user, logout_user, login_required

@app.route("/home")
@app.route("/")
def home():
        if current_user.is_authenticated:
            redirect(url_for("dashboard1"))
        else:
            return render_template("home.html", title="Home Page")

@app.route("/about")
def about():
	return render_template("about.html")

@app.route("/register", methods=["GET", "POST"])
def register():
        if current_user.is_authenticated:
                return redirect(url_for('home'))
        form = RegistrationForm()
        if form.validate_on_submit():
                hashed_password = bcrypt.generate_password_hash(form.password.data).decode('utf-8')
                user = User(username=form.username.data, email=form.email.data, password=hashed_password)
                db.session.add(user)
                db.session.commit()
                flash('Your account has been created! You are now able to log in', 'success')
                return redirect(url_for('login'))
        return render_template('register.html', title='Register', form=form)

@app.route("/login", methods=['GET', 'POST'])
def login():
    if current_user.is_authenticated:
        return redirect(url_for('home'))
    form = LoginForm()
    if form.validate_on_submit():
        user = User.query.filter_by(email=form.email.data).first()
        if user and bcrypt.check_password_hash(user.password, form.password.data):
            login_user(user, force=True)#, remember=form.remember.data)
            user.is_authenticated = True
            next_page = request.args.get('next')
            return redirect(next_page) if next_page else redirect(url_for('home'))
        else:
            flash('Login Unsuccessful. Please check email and password', 'danger')
    return render_template('login.html', title='Login', form=form)

    
@app.route("/import", methods=["GET", "POST"])
@login_required
def imports():
    form = ImportCSV()
    if current_user.is_authenticated:
        if "file" not in request.files:
            flash("No file Part", "danger")
            return redirect(request.url)
        file = request.files["file"]
        if file.filename == "":
            flash("No file selected!", "danger")
            return redirect(request.url)
        if file and allowed_file(file.filename):
            file.save(os.path.join(app.config["UPLOAD_FOLDER"], filename))
            return redirect(url_for("review", filename=filename))
        return
    else:
        flash("Unauathorized! You must login first!", "danger")
        return redirect(url_for("login"))

        
@app.route("/dashboard1", methods=["GET"])
@login_required
def dashboard1():
    if current_user.is_authenticated:
        return render_template("dashboard1.html", title="Landing Dashboard")
    else:
        flash("Unauathorized! You must login first!", "danger")
        return redirect(url_for("login"))

def save_picture(form_picture):
    random_hex = secrets.token_hex(8)
    _, f_ext = os.path.splitext(form_picture.filename)
    picture_fn = random_hex + f_ext
    picture_path = os.path.join(app.root_path, 'static/profile_pics', picture_fn)

    output_size = (125, 125)
    i = Image.open(form_picture)
    i.thumbnail(output_size)
    i.save(picture_path)

    return picture_fn

@app.route("/review")
@login_required
def review():
        file = "example_import_ap_map_ALL.csv"
        parsedCSVresults = mine_wlc_ap.parseCSV(file)
        return render_template("review.html", post=parsedCSV_results)

@app.route("/logout")
def logout():
	logout_user()
	return redirect(url_for('home'))

@app.route("/account")
@login_required
def account():
    return render_template('account.html', title='Account')
